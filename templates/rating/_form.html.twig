
    <html >
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stars Rating</title>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
</head>
<body>
   {{ form_start(form,{'attr': {'novalidate': 'novalidate'}}) }}
  {{ form_widget(form.value, { 'attr': {'id': 'value'} }) }}
  <h4> laboratoire : <h4>
    {{ form_widget(form.labo) }}
        <div class="stars">
            <i class="lar la-star" data-value="1"></i><i class="lar la-star" data-value="2"></i><i class="lar la-star" data-value="3"></i><i class="lar la-star" data-value="4"></i><i class="lar la-star" data-value="5"></i>
        </div>
       
   

    <script >
    
    window.onload = () => {
    // On va chercher toutes les étoiles
    const stars = document.querySelectorAll(".la-star");
    
    // On va chercher l'input
    const rating_value = document.querySelector("#rating_value");

    // On boucle sur les étoiles pour le ajouter des écouteurs d'évènements
    for(star of stars){
        // On écoute le survol
        star.addEventListener("mouseover", function(){
            resetStars();
            this.style.color = "red";
            this.classList.add("las");
            this.classList.remove("lar");
            // L'élément précédent dans le DOM (de même niveau, balise soeur)
            let previousStar = this.previousElementSibling;

            while(previousStar){
                // On passe l'étoile qui précède en rouge
                previousStar.style.color = "red";
                previousStar.classList.add("las");
                previousStar.classList.remove("lar");
                // On récupère l'étoile qui la précède
                previousStar = previousStar.previousElementSibling;
            }
        });

        // On écoute le clic
        star.addEventListener("click", function(){
            rating_value.value = this.dataset.value;
        });

        star.addEventListener("mouseout", function(){
            resetStars(rating_value.value);
        });
    }
 /**
     * Reset des étoiles en vérifiant la rating_value dans l'input caché
     * @param {number} rating_value 
     */
    function resetStars(rating_value = 0){
        for(star of stars){
            if(star.dataset.value > rating_value){
                star.style.color = "black";
                star.classList.add("lar");
                star.classList.remove("las");
            }else{
                star.style.color = "red";
                star.classList.add("las");
                star.classList.remove("lar");
            }
        }

    }


}
   
    
    </script>
    
</body>
</html>
    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }}
